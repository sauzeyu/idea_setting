<application>
  <component name="AppStorage">
    <option name="lastReplacementTargetLanguage" value="ENGLISH" />
    <option name="newTranslationDialogHeight" value="404" />
    <option name="newTranslationDialogWidth" value="763" />
    <option name="newTranslationDialogX" value="1060" />
    <option name="newTranslationDialogY" value="680" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="Indicates the dependency is optional for use of this library. While the version of the dependency will be taken into account for dependency calculation if the library is used elsewhere, it will not be passed on transitively" />
      <item value="whether to support dynamic refresh, the default does not support " />
      <item value="Constructs an instance with the value present.&#10;Params:&#10;value – the non-null value to be present&#10;Throws:&#10;NullPointerException – if value is null" />
      <item value="Returns an Optional with the specified present non-null value.&#10;Params:&#10;value – the value to be present, which must be non-null&#10;Type parameters:&#10;&lt;T&gt; – the class of the value&#10;Returns:&#10;an Optional with the value present&#10;Throws:&#10;NullPointerException – if value is null" />
      <item value="Error has been observed at the following site(s):&#10;&#9;__checkpoint ⇢ org.springframework.cloud.gateway.filter.WeightCalculatorWebFilter [DefaultWebFilterChain]&#10;&#9;__checkpoint ⇢ org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter [DefaultWebFilterChain]&#10;&#9;__checkpoint ⇢ HTTP GET &quot;vecentekdkserver-backdkmRoleselectForPage?pageIndex=1&amp;pageSize=10&quot; [ExceptionHandlingWebHandler]&#10;Original Stack Trace:" />
      <item value="block()blockFirst()blockLast() are blocking" />
      <item value="which is not supported in thread reactor-http-nio-2" />
      <item value="Error has been observed at the following site(s):" />
      <item value="You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath." />
      <item value="cache" />
      <item value="currently" />
      <item value="Some problems were encountered while building the effective model for org.springframework.boot:dkserver-gateway:jar:1.0-SNAPSHOT&#10;'parent.relativePath' of POM org.springframework.boot:dkserver-gateway:1.0-SNAPSHOT (G:\Company\Dk\Dev\vecentek-dkserver\dkserver-gateway\pom.xml) points at com.vecentek.dkserver:vecentek-dkserver instead of org.springframework.boot:spring-boot-starter-parent, please verify your project structure @ line 5, column 13&#10;It is highly recommended to fix these problems because they threaten the stability of your build.&#10;For this reason, future Maven versions might no longer support building such malformed projects." />
      <item value="Duplicate Key Exception" />
      <item value="Cannot resolve method 'buildUserVehicleDTO(int, java.util.List&lt;com.vecentek.back.dto.UploadBluetoothsErrorDTO&gt;)'" />
      <item value="Checks if any of the CharSequences are empty (&quot;&quot;) or null or whitespace only.&#10;Whitespace is defined by Character.isWhitespace(char).&#10;       StringUtils.isAnyBlank((String) null)    = true&#10;       StringUtils.isAnyBlank((String[]) null)  = false&#10;       StringUtils.isAnyBlank(null, &quot;foo&quot;)      = true&#10;       StringUtils.isAnyBlank(null, null)       = true&#10;       StringUtils.isAnyBlank(&quot;&quot;, &quot;bar&quot;)        = true&#10;       StringUtils.isAnyBlank(&quot;bob&quot;, &quot;&quot;)        = true&#10;       StringUtils.isAnyBlank(&quot;  bob  &quot;, null)  = true&#10;       StringUtils.isAnyBlank(&quot; &quot;, &quot;bar&quot;)       = true&#10;       StringUtils.isAnyBlank(new String[] {})  = false&#10;       StringUtils.isAnyBlank(new String[]{&quot;&quot;}) = true&#10;       StringUtils.isAnyBlank(&quot;foo&quot;, &quot;bar&quot;)     = false&#10;       &#10;Params:&#10;css – the CharSequences to check, may be null or empty&#10;Returns:&#10;true if any of the CharSequences are empty or null or whitespace only&#10;Since:&#10;3.2" />
      <item value="Blank" />
      <item value="Checks if all of the CharSequences are empty (&quot;&quot;), null or whitespace only.&#10;Whitespace is defined by Character.isWhitespace(char).&#10;       StringUtils.isAllBlank(null)             = true&#10;       StringUtils.isAllBlank(null, &quot;foo&quot;)      = false&#10;       StringUtils.isAllBlank(null, null)       = true&#10;       StringUtils.isAllBlank(&quot;&quot;, &quot;bar&quot;)        = false&#10;       StringUtils.isAllBlank(&quot;bob&quot;, &quot;&quot;)        = false&#10;       StringUtils.isAllBlank(&quot;  bob  &quot;, null)  = false&#10;       StringUtils.isAllBlank(&quot; &quot;, &quot;bar&quot;)       = false&#10;       StringUtils.isAllBlank(&quot;foo&quot;, &quot;bar&quot;)     = false&#10;       StringUtils.isAllBlank(new String[] {})  = true&#10;       &#10;Params:&#10;css – the CharSequences to check, may be null or empty&#10;Returns:&#10;true if all of the CharSequences are empty or null or whitespace only" />
      <item value="Abbreviates a String using ellipses. This will turn &quot;Now is the time for all good men&quot; into &quot;Now is the time for...&quot;&#10;Specifically:&#10;If the number of characters in str is less than or equal to maxWidth, return str.&#10;Else abbreviate it to (substring(str, 0, max-3) + &quot;...&quot;).&#10;If maxWidth is less than 4, throw an IllegalArgumentException.&#10;In no case will it return a String of length greater than maxWidth.&#10;       StringUtils.abbreviate(null, )      = null&#10;       StringUtils.abbreviate(&quot;&quot;, 4)        = &quot;&quot;&#10;       StringUtils.abbreviate(&quot;abcdefg&quot;, 6) = &quot;abc...&quot;&#10;       StringUtils.abbreviate(&quot;abcdefg&quot;, 7) = &quot;abcdefg&quot;&#10;       StringUtils.abbreviate(&quot;abcdefg&quot;, 8) = &quot;abcdefg&quot;&#10;       StringUtils.abbreviate(&quot;abcdefg&quot;, 4) = &quot;a...&quot;&#10;       StringUtils.abbreviate(&quot;abcdefg&quot;, 3) = IllegalArgumentException&#10;       &#10;Params:&#10;str – the String to check, may be null&#10;maxWidth – maximum length of result String, must be at least 4" />
      <item value="which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by" />
      <item value="functionally" />
      <item value=" Every derived table must have its own alias" />
      <item value="very derived table must have its own alias" />
      <item value="already" />
      <item value="Result type not match for select id=&quot;selectBluetoothList&quot; srcType: targetType: com.vecentek.back.entity.DkmBluetooths" />
      <item value="Encodes this String into a sequence of bytes using the platform's default charset, storing the result into a new byte array.&#10;The behavior of this method when this string cannot be encoded in the default charset is unspecified. The java.nio.charset.CharsetEncoder class should be used when more control over the encoding process is required" />
      <item value="Unreachable" />
      <item value="Throwable argument 'e' to 'System.out.println()' call " />
      <item value="Provides programmatic access to the stack trace information printed by printStackTrace(). Returns an array of stack trace elements, each representing one stack frame. The zeroth element of the array (assuming the array's length is non-zero) represents the top of the stack, which is the last method invocation in the sequence. Typically, this is the point at which this throwable was created and thrown. The last element of the array (assuming the array's length is non-zero) represents the bottom of the stack, which is the first method invocation in the sequence.&#10;Some virtual machines may, under some circumstances, omit one or more stack frames from the stack trace. In the extreme case, a virtual machine that has no stack trace information concerning this throwable is permitted to return a zero-length array from this method. Generally speaking, the array returned by this method will contain one element for every frame that would be printed by printStackTrace. Writes to the returned array do not affect future calls to this method.&#10;Returns:&#10;an array of stack trace elements representing the stack trace pertaining to this throwable." />
      <item value="Contents of collection 'errorVinList' are updated, but never queried " />
      <item value="SQL Integrity Constraint Violation Exception" />
      <item value="Returns the detail message string of this throwable.&#10;Returns:&#10;the detail message string of this Throwable instance (which may be null)." />
      <item value="Constructs a new throwable with the specified detail message. The cause is not initialized, and may subsequently be initialized by a call to initCause.&#10;The fillInStackTrace() method is called to initialize the stack trace data in the newly created throwable.&#10;Params:&#10;message – the detail message. The detail message is saved for later retrieval by the getMessage() method." />
      <item value="Specific details about the Throwable. For example, for FileNotFoundException, this contains the name of the file that could not be found." />
      <item value="Point not on curve" />
      <item value="Initializes the key pair generator for a certain keysize with the given source of randomness (and a default parameter set).&#10;Params:&#10;keysize – the keysize. This is an algorithm-specific metric, such as modulus length, specified in number of bits.&#10;random – the source of randomness.&#10;Throws:&#10;InvalidParameterException – if the keysize is not supported by this KeyPairGenerator object." />
      <item value="secret" />
      <item value="Non-static method cannot be referenced from a static context" />
      <item value="Cannot resolve method 'ok(java.lang.String, long, java.util.List&lt;com.vecentek.back.entity.DkmAdmin&gt;)'" />
      <item value="Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory" />
      <item value="nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dkmAdminServiceImpl': Injection of resource dependencies failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'dkmAdminMapper' defined in file " />
      <item value="Injection" />
      <item value="batch" />
      <item value="Non-static method cannot be referenced from a static contexT" />
      <item value="Non-static method cannot be referenced from a static contex" />
      <item value="Enables Spring's annotation-driven transaction management capability, similar to the support found in Spring's &lt;tx:&gt; XML namespace. To be used on @Configuration classes to configure traditional, imperative transaction management or reactive transaction management.&#10;The following example demonstrates imperative transaction management using a PlatformTransactionManager. For reactive transaction management, configure a ReactiveTransactionManager instead.&#10;   @Configuration&#10;   @EnableTransactionManagement&#10;   public class AppConfig {&#10;  &#10;       @Bean&#10;       public FooRepository fooRepository() {&#10;            configure and return a class having @Transactional methods&#10;           return new JdbcFooRepository(dataSource());&#10;       }&#10;  &#10;       @Bean&#10;       public DataSource dataSource() {&#10;            configure and return the necessary JDBC DataSource&#10;       }&#10;  &#10;       @Bean&#10;       public PlatformTransactionManager txManager() {&#10;           return new DataSourceTransactionManager(dataSource());&#10;       }&#10;   }&#10;For reference, the example above can be compared to the following Spring XML configuration:&#10;   &lt;beans&gt;&#10;  &#10;       &lt;tx:annotation-driven&gt;&#10;  &#10;       &lt;bean id=&quot;fooRepository&quot; class=&quot;com.foo.JdbcFooRepository&quot;&gt;&#10;           &lt;constructor-arg ref=&quot;dataSource&quot;&gt;&#10;       &lt;bean&gt;&#10;  &#10;       &lt;bean id=&quot;dataSource&quot; class=&quot;com.vendor.VendorDataSource&quot;&gt;&#10;  &#10;       &lt;bean id=&quot;transactionManager&quot; class=&quot;org.sfwk...DataSourceTransactionManager&quot;&gt;&#10;           &lt;constructor-arg ref=&quot;dataSource&quot;&gt;&#10;       &lt;bean&gt;&#10;  &#10;   &lt;beans&gt;&#10;   &#10;In both of the scenarios above, @EnableTransactionManagement and &lt;tx:annotation-driven&gt; are responsible for registering the necessary Spring components that power annotation-driven transaction management, such as the TransactionInterceptor and the proxy- or AspectJ-based advice that weave the interceptor into the call stack when JdbcFooRepository's @Transactional methods are invoked.&#10;A minor difference between the two examples lies in the naming of the TransactionManager bean: In the @Bean case, the name is &quot;txManager&quot; (per the name of the method); in the XML case, the name is &quot;transactionManager&quot;. The &lt;tx:annotation-driven&gt; is hard-wired to look for a bean named &quot;transactionManager&quot; by default, however @EnableTransactionManagement is more flexible; it will fall back to a by-type lookup for any TransactionManager bean in the container. Thus the name can be &quot;txManager&quot;, &quot;transactionManager&quot;, or &quot;tm&quot;: it simply does not matter.&#10;For those that wish to establish a more direct relationship between @EnableTransactionManagement and the exact transaction manager bean to be used, the TransactionManagementConfigurer callback interface may be implemented - notice the implements clause and the @Override-annotated method below:&#10;   @Configuration&#10;   @EnableTransactionManagement&#10;   public class AppConfig implements TransactionManagementConfigurer {&#10;  &#10;       @Bean&#10;       public FooRepository fooRepository() {&#10;            configure and return a class having @Transactional methods&#10;           return new JdbcFooRepository(dataSource());&#10;       }&#10;  &#10;       @Bean&#10;       public DataSource dataSource() {&#10;            configure and return the necessary JDBC DataSource&#10;       }&#10;  &#10;       @Bean&#10;       public PlatformTransactionManager txManager() {&#10;           return new DataSourceTransactionManager(dataSource());&#10;       }&#10;  &#10;       @Override&#10;       public PlatformTransactionManager annotationDrivenTransactionManager() {&#10;           return txManager();&#10;       }&#10;   }&#10;This approach may be desirable simply because it is more explicit, or it may be necessary in order to distinguish between two TransactionManager beans present in the same container. As the name suggests, the annotationDrivenTransactionManager() will be the one used for processing @Transactional methods. See TransactionManagementConfigurer Javadoc for further details.&#10;The mode attribute controls how advice is applied: If the mode is AdviceMode.PROXY (the default), then the other attributes control the behavior of the proxying. Please note that proxy mode allows for interception of calls through the proxy only; local calls within the same class cannot get intercepted that way.&#10;Note that if the mode is set to AdviceMode.ASPECTJ, then the value of the proxyTargetClass attribute will be ignored. Note also that in this case the spring-aspects module JAR must be present on the classpath, with compile-time weaving or load-time weaving applying the aspect to the affected classes. There is no proxy involved in such a scenario; local calls will be intercepted as well." />
      <item value="trace" />
      <item value="Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation). The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it's nonempty.)&#10;Params:&#10;c – collection containing elements to be added to this list&#10;Returns:&#10;true if this list changed as a result of the call" />
      <item value="Contents of collection 'errorVinList' are updated, but never queried" />
      <item value="Returns true if this collection contains no elements.&#10;Returns:&#10;true if this collection contains no elements" />
      <item value="dynamic" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1239" />
        <entry key="ENGLISH" value="1239" />
        <entry key="DANISH" value="2" />
        <entry key="FRISIAN" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="JAPANESE" value="1" />
        <entry key="INDONESIAN" value="2" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1648520907920" />
  </component>
  <component name="Settings">
    <option name="autoReplace" value="true" />
    <option name="keepFormat" value="true" />
    <option name="selectTargetLanguageBeforeReplacement" value="true" />
    <option name="showActionsInContextMenuOnlyWithSelection" value="false" />
    <option name="showExplanation" value="true" />
    <option name="showWordsOnStartup" value="true" />
    <option name="translateDocumentation" value="true" />
  </component>
</application>